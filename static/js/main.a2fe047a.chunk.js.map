{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","handleChange","placeholder","type","onChange","App","changeText","e","setState","searchValue","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUAoBeA,G,kBAhBF,SAAAC,GAEL,OAEQ,6BAASC,UAAU,kBAEf,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCSvBC,EAjBE,SAAAR,GAEb,OACI,6BAEI,yBAAKC,UAAU,aAAf,OAEID,EAAMS,WAAa,GACnBT,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAE1B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,OAC3B,8CCHNQ,EAVG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAE1B,OACI,6BACI,2BAAOC,KAAK,SAASD,YAAaA,EAAaE,SAAUH,MCwC1DI,E,YAxCX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KAOVkB,WAAa,SAACC,GACV,EAAKC,SAAS,CAEVC,YAAaF,EAAEG,OAAOC,SAT1B,EAAKC,MAAQ,CACTH,YAAa,GACbZ,SAAU,IAJC,E,iFAeE,IAAD,OAChBgB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,+BAGtC,IAAD,EAE2BC,KAAKN,MAA9Bf,EAFF,EAEEA,SAAUY,EAFZ,EAEYA,YACXU,EAAmBtB,EAASuB,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASb,MACxF,OACI,yBAAKpB,UAAU,OACX,gDAChB,kBAAC,EAAD,CAAWa,YAAY,kBAAmBD,aAAciB,KAAKZ,aAE7C,2BAAIY,KAAKN,MAAMH,aACf,kBAAC,EAAD,CAAUZ,SAAUsB,S,GAhClBI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.a2fe047a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../styles/card.css';\r\n\r\n\r\nconst Card = props => {\r\n\r\n        return (\r\n\r\n                <section className=\"card-container\">\r\n\r\n                    <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2&size=250x250`}/>\r\n                    <h3>{props.monster.name}</h3>\r\n                    <p>{props.monster.email}</p>\r\n                </section>\r\n\r\n\r\n        );\r\n\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport '../../styles/card-list.css';\r\nimport Card from \"../card/card\";\r\n\r\nconst CardList = props => {\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"card-list\">    {\r\n\r\n                props.monsters !== [] ?\r\n                props.monsters.map(monster => (\r\n\r\n                <Card key={monster.id} monster={monster}/>\r\n                )) :(<div>Loading...</div>)}</div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({handleChange, placeholder}) => {\r\n\r\n        return (\r\n            <div>\r\n                <input type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n            </div>\r\n        );\r\n\r\n};\r\n\r\nexport default SearchBox;","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list\";\nimport SearchBox from \"./components/search-box/search-box\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchValue: '',\n            monsters: []\n        };\n    }\n\n    changeText = (e) => {\n        this.setState({\n\n            searchValue: e.target.value,\n        });\n    };\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}));\n    }\n\n    render() {\n\n        const {monsters, searchValue} = this.state;\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchValue));\n        return (\n            <div className=\"App\">\n                <h1>Monster Rollodox</h1>\n<SearchBox placeholder=\"Search monsters\"  handleChange={this.changeText} />\n\n                <p>{this.state.searchValue}</p>\n                <CardList monsters={filteredMonsters}>\n\n                </CardList>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}